<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>cluster</groupId>
  <artifactId>tcs</artifactId>
  <version>0.1-SNAPSHOT</version>
  <name>${project.artifactId}</name>
  <description>My wonderfull scala app</description>
  <inceptionYear>2018</inceptionYear>
  <licenses>
    <license>
      <name>My License</name>
      <url>http://....</url>
      <distribution>repo</distribution>
    </license>
  </licenses>

  <properties>
    <maven.compiler.source>1.8</maven.compiler.source>
    <maven.compiler.target>1.8</maven.compiler.target>
    <encoding>UTF-8</encoding>
	<java.version>1.8</java.version>
    <scala.version>2.12.7</scala.version>
    <scala.compat.version>2.12</scala.compat.version>
	<akka.version>2.5.19</akka.version>
	<cassandraPluginVersion>0.91</cassandraPluginVersion>	
    <spec2.version>4.2.0</spec2.version>
    <scalapb.version>0.8.4</scalapb.version>
  </properties>

  <dependencies>
    <dependency>
      <groupId>org.scala-lang</groupId>
      <artifactId>scala-library</artifactId>
      <version>${scala.version}</version>
    </dependency>
	<dependency>
		<groupId>com.typesafe.akka</groupId>
		<artifactId>akka-actor_${scala.compat.version}</artifactId>
		<version>${akka.version}</version>
	</dependency>
	<dependency>
		<groupId>com.typesafe.akka</groupId>
		<artifactId>akka-cluster_${scala.compat.version}</artifactId>
		<version>${akka.version}</version>
	</dependency>
	<dependency>
		<groupId>com.typesafe.akka</groupId>
		<artifactId>akka-cluster-tools_${scala.compat.version}</artifactId>
		<version>${akka.version}</version>
	</dependency>
	<dependency>
		<groupId>com.typesafe.akka</groupId>
		<artifactId>akka-persistence_${scala.compat.version}</artifactId>
		<version>${akka.version}</version>
	</dependency>

    <dependency>
      <groupId>com.typesafe.akka</groupId>
      <artifactId>akka-persistence-query_${scala.compat.version}</artifactId>
      <version>${akka.version}</version>
    </dependency>

    <dependency>
        <groupId>com.typesafe.akka</groupId>
        <artifactId>akka-persistence-cassandra_${scala.compat.version}</artifactId>
        <version>${cassandraPluginVersion}</version>
        <exclusions>
          <exclusion>
              <groupId>com.typesafe.akka</groupId>
              <artifactId>akka-persistence-query_${scala.compat.version}</artifactId>
          </exclusion>
        </exclusions>
    </dependency>
    <dependency>
        <groupId>com.typesafe.akka</groupId>
        <artifactId>akka-persistence-cassandra-launcher_${scala.compat.version}</artifactId>
        <version>${cassandraPluginVersion}</version>
    </dependency>
    <dependency>
      <groupId>com.thesamet.scalapb</groupId>
      <artifactId>scalapb-runtime_${scala.compat.version}</artifactId>
      <version>${scalapb.version}</version>
    </dependency>
    <dependency>
        <groupId>com.typesafe.akka</groupId>
        <artifactId>akka-slf4j_${scala.compat.version}</artifactId>
        <version>${akka.version}</version>
    </dependency>
    <dependency>
        <groupId>ch.qos.logback</groupId>
        <artifactId>logback-classic</artifactId>
        <version>1.2.3</version>
    </dependency>
    <dependency>
        <groupId>com.typesafe.akka</groupId>
        <artifactId>akka-testkit_${scala.compat.version}</artifactId>
        <version>${akka.version}</version>
        <scope>test</scope>
    </dependency>
    <dependency>
        <groupId>org.scalatest</groupId>
         <artifactId>scalatest_${scala.compat.version}</artifactId>
        <version>3.0.1</version>
        <scope>test</scope>
    </dependency>
    <dependency>
        <groupId>commons-io</groupId>
        <artifactId>commons-io</artifactId>
        <version>2.4</version>
        <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <sourceDirectory>src/main/scala</sourceDirectory>
    <testSourceDirectory>src/test/scala</testSourceDirectory>
    <plugins>
		<plugin>
		 <groupId>org.apache.maven.plugins</groupId>
		 <artifactId>maven-shade-plugin</artifactId>
		 <!--version>1.5</version -->
		 <version>3.2.1</version>
		 <executions>
		  <execution>
		   <phase>package</phase>
		   <goals>
			<goal>shade</goal>
		   </goals>
		   <configuration>
			<shadedArtifactAttached>true</shadedArtifactAttached>
			<shadedClassifierName>allinone</shadedClassifierName>
			<artifactSet>
			 <includes>
			  <include>*:*</include>
			 </includes>
			</artifactSet>
			<transformers>
			  <transformer
			   implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
			   <resource>reference.conf</resource>
			  </transformer>
			  <transformer
			   implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
			   <manifestEntries>
				<Main-Class>cluster.client.Main</Main-Class>
			   </manifestEntries>
			  </transformer>
			</transformers>
		   </configuration>
		  </execution>
		 </executions>
		</plugin>	  

      <plugin>
        <!-- see http://davidb.github.com/scala-maven-plugin -->
        <groupId>net.alchim31.maven</groupId>
        <artifactId>scala-maven-plugin</artifactId>
        <version>3.4.4</version>
        <executions>
          <execution>
            <goals>
              <goal>compile</goal>
              <goal>testCompile</goal>
            </goals>
            <configuration>
              <args>
                <arg>-dependencyfile</arg>
                <arg>${project.build.directory}/.scala_dependencies</arg>
              </args>
            </configuration>
          </execution>
        </executions>
      </plugin>



      <!-- =========================== PROTOBUF START ==========================
          Plugin 1. Create the generated protobuf folder in target
          Plugin 2. Add the protobuf generated folder as a source
          Plugin 3. Compile the proto file(s)

      -->
      <!-- Plugin 1. Create the generated protobuf folder in target  -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-antrun-plugin</artifactId>
        <version>1.7</version>
        <executions>
          <execution>
            <id>mkdir-generated-sources</id>
            <goals>
              <goal>run</goal>
            </goals>
            <phase>generate-sources</phase>
            <configuration>
              <target>
                <mkdir dir="${project.build.directory}/generated-sources/protobuf"/>
              </target>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- Plugin 1. Add the protobuf generated folder as a source -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>build-helper-maven-plugin</artifactId>
        <version>1.12</version>
        <executions>
          <execution>
            <phase>generate-sources</phase>
            <goals>
              <goal>add-source</goal>
            </goals>
            <configuration>
              <sources>
                <source>${project.build.directory}/generated-sources/protobuf</source>
              </sources>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- Plugin 3. Compile the proto file(s) -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>exec-maven-plugin</artifactId>
        <version>1.5.0</version>
        <executions>
          <execution>
            <id>generate-scala-protobuf-classes</id>
            <goals>
              <goal>java</goal>
            </goals>
            <phase>generate-sources</phase>
            <configuration>
              <mainClass>scalapb.ScalaPBC</mainClass>
              <cleanupDaemonThreads>false</cleanupDaemonThreads>
              <includePluginDependencies>true</includePluginDependencies>
              <classpathScope>compile</classpathScope>
              <executableDependency>
                <groupId>com.thesamet.scalapb</groupId>
                <artifactId>scalapbc_${scala.compat.version}</artifactId>
              </executableDependency>
              <arguments>
                <argument>-v300</argument> <!-- for protoc v3.0.0, can be 261 for v2.6.1 -->
                <argument>--throw</argument> <!-- Important: otherwise scalapbc will kill the VM -->
                <argument>--proto_path=${project.basedir}/src/main/protobuf</argument>
                <argument>--proto_path=${project.basedir}/third_party</argument>
                <argument>--scala_out=${project.build.directory}/generated-sources/protobuf</argument>
                <!--
                If you need to pass generator parameters to ScalaPB, then instead of the - -scala_out line above,
                have something like this:
                <argument>- -scala_out=single_line_to_string,java_conversions:${project.build.directory}/generated-sources/protobuf</argument>

                Note that there should be two dashes before the scala-out and not dash-space-dash
                like above, but XML wouldn't allow two dashes inside a comment :/
                -->
                <argument>${project.basedir}/src/main/protobuf/proto.proto</argument>

              </arguments>
            </configuration>
          </execution>
        </executions>
        <dependencies>
          <dependency>
            <groupId>com.thesamet.scalapb</groupId>
            <artifactId>scalapbc_${scala.compat.version}</artifactId>
            <version>${scalapb.version}</version>
          </dependency>
        </dependencies>
      </plugin>

      <!-- =========================== PROTOBUF END ========================== -->


      <!-- =========================== SCALA TEST START ========================== -->

      <!-- Maven SureFile Plugin -->

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>2.21.0</version>
        <configuration>
          <!-- Tests will be run with scalatest-maven-plugin instead -->
          <skipTests>true</skipTests>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.scalatest</groupId>
        <artifactId>scalatest-maven-plugin</artifactId>
        <version>2.0.0</version>
        <configuration>
          <reportsDirectory>${project.build.directory}/surefire-reports</reportsDirectory>
          <junitxml>.</junitxml>
          <filereports>TestSuiteReport.txt</filereports>
          <!-- Comma separated list of JUnit test class names to execute -->
          <jUnitClasses>samples.AppTest</jUnitClasses>
        </configuration>
        <executions>
          <execution>
            <id>test</id>
            <goals>
              <goal>test</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
</project>