# This is the main configuration file for our application, it provides overrides to the default values
# provided in the reference.conf of the modules from Akka
akka {
  actor {
    # Must be set like this to use Akka Cluster
    provider = cluster

    # Only for convenience in the quickstart, Java serialization should not be used for actual applications
    warn-about-java-serializer-usage = on
    #allow-java-serialization=off

    serializers {
      #java = "akka.serialization.JavaSerializer"
      proto = "akka.remote.serialization.ProtobufSerializer"
    }
    serialization-bindings {
      "cluster.tcs.proto.MasterAck" = proto
    }
  }

  # Use slf4j (backed by logback) for logging, additional configuration
  # can be done in logback.xml
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  loglevel = INFO

  # For the sample, just bind to loopback and do not allow access from the network
  remote.netty.tcp.hostname=127.0.0.1
  # the port is overridden by the logic in Main.scala
  remote.netty.tcp.port=0

  cluster {
    # Seed nodes are a way to have a node join the cluster (or form a new cluster) from configuration.
    seed-nodes = [
      "akka.tcp://ClusterSystem@127.0.0.1:2551",
      "akka.tcp://ClusterSystem@127.0.0.1:2552",
      "akka.tcp://ClusterSystem@127.0.0.1:2553",
      "akka.tcp://ClusterSystem@127.0.0.1:2554"]

    # Only for convenience in the quickstart, auto-downing should not be used for actual applications.
    # Read more here: http://doc.akka.io/docs/akka/current/scala/cluster-usage.html#auto-downing-do-not-use-
    # auto-down-unreachable-after = 10s

    # Needed when running many actor systems in the same JVM
    jmx.multi-mbeans-in-same-jvm = on
  }

  # use Cassandra to store both snapshots and the events of the persistent actors
  persistence {
    journal.plugin = "cassandra-journal"
    #cassandra-journal.contact-points = "ip1,ip2"
    #cassandra-journal.port = 9042
    #cassandra-journal.keyspace = "akka" #or "custom_journal"
    #cassandra-journal.keyspace-autocreate = true #???
    #cassandra-journal.keyspace-autocreate-retries = 1
    #cassandra-journal.table = "messages"
    #cassandra-journal.table-compaction-strategy="SizeTieredCompactionStrategy"
    #cassandra-journal.replication-strategy = SimpleStrategy # or NetworkTopologyStrategy
    #cassandra-journal.replication-factor = 2
    #cassandra-journal.data-center-replication-factors =
    #cassandra-journal.max-message-batch-size=???
    #cassandra-journal.write-retries=3
    #cassandra-journal.delete-retries=3
    #cassandra-journal.target-partition-size=500000
    #cassandra-journal.max-result-size=50001
    #cassandra-journal.write-consistency = "ANY" #  or "QUORUM"
    #cassandra-journal.read-consistency = "ANY" # or "QUORUM"
    #cassandra-journal.authentication.username=??
    #cassandra-journal.authentication.password=??
    #cassandra-journal.ssl.truststore.path=
    #cassandra-journal.ssl.truststore.password=
    #cassandra-journal.ssl.keystore.path=
    #cassandra-journal.ssl.keystore.password=
    #cassandra-journal.local-datacenter=

    snapshot-store.plugin = "cassandra-snapshot-store"
    #cassandra-snapshot-store.contact-points = "ip1, ip2"
    #cassandra-snapshot-store.port=9042
    #cassandra-snapshot-store.keyspace="akka_snapshot" # or "custom_snapshot"
    #cassandra-snapshot-store.keyspace-autocreate=true # ???
    #cassandra-snapshot-store.keyspace-autocreate-retries = 1
    #cassandra-snapshot-store.table="snapshots"
    #cassandra-snapshot-store.table-compaction-strategy="SizeTieredCompactionStrategy"
    #cassandra-snapshot-store.replication-strategy= "SimpleStrategy" # or "NetworkTopologyStrategy"
    #cassandra-snapshot-store.replication-factor=2
    #cassandra-snapshot-store.data-center-replication-factors =
    #cassandra-snapshot-store.max-metadata-result-size =
    #cassandra-snapshot-store.write-consistency = "ANY"
    #cassandra-snapshot-store.read-consistency = "ANY"
    #cassandra-snapshot-store.authentication.username = ???
    #cassandra-snapshot-store.authentication.password = ???
    #cassandra-snapshot-store.ssl.truststore.path = ??
    #cassandra-snapshot-store.ssl.truststore.password = ??
    #cassandra-snapshot-store.ssl.keystore.path = ??
    #cassandra-snapshot-store.ssl.keystore.password = ??
    #cassandra-snapshot-store.local-datacenter = ??
    #
    #

  }

  # Run the pubsub mediator on all nodes, without any code starting it up
  extensions = ["akka.cluster.pubsub.DistributedPubSub"]
}

# Configuration related to the app is in its own namespace
distributed-workers {
  # Each worker pings the master with this interval
  # to let it know that it is alive
  worker-registration-interval = 10s
  # If a worker hasn't gotten in touch in this long
  # it is removed from the set of workers
  consider-worker-dead-after = 60s

  # If a workload hasn't finished in this long it
  # is considered failed and is retried
  work-timeout = 10s

}


# Configuration related to the app is in its own namespace
distributed-transporters {
  # Each transporter pings the master with this interval
  # to let it know that it is alive
  transporter-registration-interval = 10s
  # If a transporter hasn't gotten in touch in this long
  # it is removed from the set of transporters
  consider-transporter-dead-after = 60s

  # If a transportload hasn't finished in this long it
  # is considered failed and is retried
  transport-timeout = 10s

}
